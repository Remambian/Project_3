version: 2.1
 
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              echo <<parameters.workflow_id>>
              aws cloudformation delete-stack --stack-name Project3-backend-<<parameters.workflow_id>>
              aws cloudformation delete-stack --stack-name Project3-frontend-<<parameters.workflow_id>>
  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            if [[ -f ".circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi    
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # isntall tar for backend
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "Project3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=$(echo ${CIRCLE_WORKFLOW_ID} | cut -c 1-7)  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "Project3-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=$(echo ${CIRCLE_WORKFLOW_ID} | cut -c 1-7)
      - run:
          name: Fetch the Public IP of the Instance
          command: |
            cat .circleci/ansible/inventory.txt
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo "Deploy Success"
  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["62:a6:96:da:34:c3:90:65:32:7d:fc:8e:cf:bf:18:56"]
      - attach_workspace:
              at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Install aws
          command: |
            pip install awscli --upgrade   
            aws --version
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            cat backend/.env

            cat .circleci/ansible/inventory.txt
            echo "Inventory Success"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml            
      - destroy-environment:          
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
        
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      # - run:
      #     name: Send migration results to memstash 
      #     command: |
      #       if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #       then
      #         curl https://kvdb.io/MAjBLn6Azr9fhPz81cSi5D/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #       fi  
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"



workflows:  
  build-workflow:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires : [build-frontend]
      # - test-backend:
      #     requires : [build-backend]
      # - scan-frontend:
      #     requires : [build-frontend]
      # - scan-backend:
      #     requires : [build-backend]      
      - deploy-infrastructure:
          requires:
            # - test-frontend
            # - test-backend
            - build-frontend
            - build-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure  