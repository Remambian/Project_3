version: 2.1

orbs:
  slack: circleci/slack@4.12.5
  
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id:
#       type: string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#               aws cloudformation delete-stack --stack-name Project3-backend-${CIRCLE_WORKFLOW_ID:0:7}
#               aws cloudformation delete-stack --stack-name Project3-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  
  # Alert-Notification
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: 
  #         name: Notify Slack
  #         command: |
  #           curl -X POST -H 'Content-type: application/json' --data '{"text":"Job failed! Please check the CI/CD pipeline."}' "${SLACK_WEBHOOK_URL}"
  #         # when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["54:d5:ab:e5:bd:ed:a2:0c:df:b3:ab:0e:40:86:7d:f7"]
      - attach_workspace:
          at: ~/

  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # apt-get update && apt-get install -y tar gzip
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "Project3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=$(echo ${CIRCLE_WORKFLOW_ID} | cut -c 1-7)  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "Project3-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=$(echo ${CIRCLE_WORKFLOW_ID} | cut -c 1-7)
      - run:
          name: Fetch the Public IP of the Instance
          command: |
            PublicIP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo [web] > .circleci/ansible/inventory.txt
            echo $PublicIP > .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt      
  
  


workflows:  
  build-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires : [build-frontend]
      - test-backend:
          requires : [build-backend]
      - scan-frontend:
          requires : [build-frontend]
      - scan-backend:
          requires : [build-backend]      
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure